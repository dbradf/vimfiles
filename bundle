#!/bin/sh

VERSION=0.2
PROGNAME=$(basename $0)

BUNDLEDIR=$HOME/.vim/bundle
GIT_MODULE_FILE=.gitmodules
GIT_CONFIG_FILE=.git/config


# Display usage message
# $1 - Error Message to display (Optional)
usage() {
    [ -n "$1" ] && echo $1 >&2
    cat <<EOM
Usage: $PROGNAME [flags] <command>

Description:
    Manage bundles used by vim.

Flags:
    -d <directory>                Bundle directory to use (default=$BUNDLEDIR)

Arguments:
    add <git_repo> <bundle_name> - Add a new bundle from the given git 
                                   repository.
    list                         - List all installed bundles.
    update <bundle_name>         - Update the specified bundle to the latest 
                                   version.
    updateall                    - Update all bundles to the latest versions.
    remove <bundle_name>         - Remove the specified bundle.

Version: $VERSION
EOM
    exit 1
} # end usage()


# Add a git submodule as a vim bundle
# $1 - url of git repository
# $2 - local name for bundle
add_bundle() {
    [ $# -ne 2 ] && usage "Missing add arguments"

    local git_repo=$1
    local local_name=$2

    git submodule add $git_repo vim/bundle/$local_name
} # end add_bundle()


# List all installed bundles.
list_bundles() {
    ls -1 $BUNDLEDIR
} # end list_bundles()    


# Update the specified vim bundle
# $1 - local name of bundle
update_bundle() {
    [ $# -ne 1 ] && usage "ERROR: update: Missing bundle_name"
    local local_name=$1

    cd $BUNDLEDIR/$local_name
    git pull
} # end update_bundle()


# Update all installed bundles
update_all_bundles() {
    [ $# -ne 0 ] && usage "ERROR: updateall: Unexpected arguments"
    
    git submodule foreach git pull
} # end update_all_bundles()


# Remove specified vim bundle
# $1 - local name of bundle to remove
remove_bundle() {
    [ $# -ne 1 ] && usage "ERROR: remove: Missing bundle_name"
    local local_name=$1

    remove_bundle_from_git_file $local_name $GIT_MODULE_FILE
    remove_bundle_from_git_file $local_name $GIT_CONFIG_FILE
    git rm --cached vim/bundle/$local_name
    git add $GIT_MODULE_FILE
    rm -rf vim/bundle/$local_name
} # end remove_bundle()


# Remove submodule info from a git file (.gitmodules or .git/config). 
# NOTE: this counts on the url option being the last item under the 
# submodule (this could be more robust)
#   $1 - name of submodule to remove.
#   $2 - file to remove submodule from.
remove_bundle_from_git_file() {
    [ $# -ne 2 ] && usage "Bad argument to remove_bundle_from_git_file"
    local local_name=$1
    local file_name=$2
    local backup_file=$file_name.$$
    local search_str="\\[submodule \\\"vim\\/bundle\\/$local_name\\\"\\]"

    sed "/$search_str/,/url = /d" $file_name > $backup_file
    mv $backup_file $file_name
} # end remove_bundle_from_git_file() 


################################################################################
# Main
################################################################################

have_args=1

while [ -n "$have_args" ]; do
    arg=$1

    case $arg in
        -d)
            [ -z "$2" ] && usage "ERROR: Bundle directory missing from -d flag"
            BUNDLEDIR=$2
            shift 2
            ;;

        *)
            have_args=
            ;;
    esac
done



[ -z "$1" ] && usage "ERROR: Missing command"

command=$1
shift

case $command in
    add)
        add_bundle $@
        ;;

    list)
        list_bundles $@
        ;;

    update)
        update_bundle $@
        ;;

    updateall)
        update_all_bundles $@
        ;;

    remove)
        remove_bundle $@
        ;;

    *)
        usage "ERROR: Bad Command: $command"
        ;;
esac

