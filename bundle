#!/bin/sh

BUNDLEDIR=$HOME/.vim/bundle
PROGNAME=$(basename $0)
GIT_MODULE_FILE=".gitmodules"
GIT_CONFIG_FILE=".git/config"


# Display usage message
# $1 - Error Message to display (Optional)
usage() {
    [ -n "$1" ] && echo $1
    cat <<EOM

USAGE: $PROGNAME <command>

Commands
    add
    update
    updateall
    remove
EOM
    exit 1
} # end usage()


# Add a git submodule as a vim bundle
# $1 - url of git repository
# $2 - local name for bundle
add_bundle() {
    [ $# -ne 2 ] && usage "Missing add arguments"

    local git_repo=$1
    local local_name=$2

    git submodule add $git_repo vim/bundle/$local_name
} # end add_bundle()


# Update the specified vim bundle
# $1 - local name of bundle
update_bundle() {
    [ $# -ne 1 ] && usage "Missing update arguments"
    local local_name=$1

    cd $BUNDLEDIR/$local_name
    git pull
} # end update_bundle()


# Update all installed bundles
update_all_bundles() {
    [ $# -ne 0 ] && usage "Too many update all arguments"
    
    git submodule foreach git pull
} # end update_all_bundles()


# Remove specified vim bundle
# $1 - local name of bundle to remove
remove_bundle() {
    [ $# -ne 1 ] && usage "Missing remove arguments"
    local local_name=$1

    remove_bundle_from_git_file $local_name $GIT_MODULE_FILE
    remove_bundle_from_git_file $local_name $GIT_CONFIG_FILE
    git rm --cached vim/bundle/$local_name
} # end remove_bundle()


# Remove submodule info from a git file (.gitmodules or .git/config). 
# NOTE: this counts on the url option being the last item under the 
# submodule (this could be more robust)
#   $1 - name of submodule to remove.
#   $2 - file to remove submodule from.
remove_bundle_from_git_file() {
    [ $# -ne 2 ] && usage "Bad argument to remove_bundle_from_git_file"
    local local_name=$1
    local file_name=$2
    local backup_file=$file_name.$$
    local search_str="\\[submodule \\\"vim\\/bundle\\/$local_name\\\"\\]"

    sed "/$search_str/,/url = /d" $file_name > $backup_file
    mv $backup_file $file_name
} # end remove_bundle_from_git_file() 


################################################################################
# Main
################################################################################

[ -z "$1" ] && usage "Missing command"

command=$1
shift

case $command in
    add )
        add_bundle $@
        ;;

    update )
        update_bundle $@
        ;;

    updateall )
        update_all_bundles $@
        ;;

    remove )
        remove_bundle $@
        ;;

    * )
        usage "Bad Command: $command"
        ;;
esac

